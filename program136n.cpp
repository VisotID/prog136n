/*Автор:Высоцкая Инесса Д.
главный модуль программы
Условие: 136 Даны натуральное число n, действительные числа a1,..., an. Вычислить: н) (sqrt(|a1|)-a1)^2+...+(sqrt(|an|)-an)^2
*/
// директива include отвечает за включение в компилируемый файл содержимое другого файла
#include <iostream> // библиотека С++, отвечающая за чтение и запись(для функций cin - функция чтения, cout - функция вывода)
#include <ctime> // библиотека С++, содержащая функции для работы с датой и временем(для функции time - получение текущего времени)
#include <vector> // библиотека С++ для работы с векторами
#include "program136n_mod.h" // модуль с функциями ввода, вывода массива и вычислениями(создан самостоятельно)

using namespace std; // используем пространство имен std для того, чтобы не писать перед функциями cin, cout "std"
using namespace operate_array; // пространство имен для модуля(создано самостоятельно)

// заголовок главной функции
int main(){

    // system - функция, выполняющая системную команду, заданную через параметр syscom
    system("chcp 65001 > nul"); // chcp - изменить кодовую страницу, chcp 65001 > nul - установка кодировки юникод UTF-8

    test(); // проверяет выполнение функции sum_array на правильность вычислений

    bool vector_or_din_arr; // вспомогательная переменная для выбора
    cout << "Вектор или динамический массив: 0 - вектор, 1 - динамический массив\n"; // вывод подсказки на экран, << - операция вставки
    cin >> vector_or_din_arr; // чтение переменной из консоли(функция чтения >> переменная), >> - операция извлечения
    if (vector_or_din_arr == false) // если пользователь выбрал вектор
    {
        vector<float> array_numv; // инициализация вектора
        size_t n = 0; // инициализация размера массива
        bool load_or_not; // вспомогательная переменная для выбора
        cout << "Загружаем массив из файла или нет: 0 - загружаем из файла, 1 - не загружаем из файла\n"; // вывод подсказки на экран, << - операция вставки
        cin >> load_or_not; // чтение переменной из консоли(функция чтения >> переменная), >> - операция извлечения
        if (load_or_not == false) // если пользователь выбрал загружаем из файла
        {
            char lfile[255]; // имя файла
            cout << "Введите имя файла для загрузки массива: "; // вывод подсказки на экран, << - операция вставки
            cin >> lfile; // чтение переменной из консоли(функция чтения >> переменная), >> - операция извлечения
            array_numv.resize(n); // изменяем размер массива
            array_out_file(lfile, array_numv, n); // функция загрузки массива из файла
            print_array(array_numv); // функция вывода массива на экран
            cout << "\n"; // перенос на другую строку
            float rez = sum_array(array_numv); // вызов функции вычисления результата
            cout << "Результат вычислений: " << rez; // вывод подсказки и результата на экран(функция вывода << "то, что выводим"), << - операция вставки 
            array_numv.clear(); // удаление памяти, выделенной под массив типа вектор
            return 0; // завершение программы
        }
        if (load_or_not == true) // если пользователь выбрал не загружаем из файла
        {
            cout << "Введите размер массива: "; // вывод подсказки на экран(функция вывода << "то, что выводим"), << - операция вставки 
            cin >> n; // чтение переменной из консоли(функция чтения >> переменная), >> - операция извлечения
            char sfile[255]; // имя файла
            cout << "Введите имя файла для сохранения массива: "; // вывод подсказки на экран, << - операция вставки
            cin >> sfile; // чтение переменной из консоли(функция чтения >> переменная), >> - операция извлечения
            array_numv.resize(n); // изменяем размер массива
            bool rand_or_hand; // вспомогательная переменная для выбора
            cout << "Как заполнить массив: 0 - вручную, 1 - рандомно\n"; // вывод подсказки на экран, << - операция вставки
            cin >> rand_or_hand; // чтение переменной из консоли(функция чтения >> переменная), >> - операция извлечения
            if (rand_or_hand == false) // если пользователь выбрал заполнить массив вручную
            {
                input_hand_array(array_numv); // функция заполнения массива вручную
            }
            if (rand_or_hand == true) // если пользователь выбрал заполнить массив рандомно
            {
                srand(time(nullptr)); // функция srand выполняет инициализацию генератра случайных чисел rand(функция time использует текущее время в качестве начального значения, что позволяет каждый раз создавать различные наборы чисел)
                input_array(array_numv); // функция заполнения массива рандомно
            }
            print_array(array_numv); // функция вывода массива на экран
            cout << "\n"; // перенос на другую строку
            array_in_file(sfile, array_numv); // функция записи массива в файл
            float rez = sum_array(array_numv); // вызов функции вычисления результата
            cout << "Результат вычислений: " << rez; // вывод подсказки и результата на экран(функция вывода << "то, что выводим"), << - операция вставки 
            array_numv.clear(); // удаление памяти, выделенной под массив типа вектор
            return 0; // завершение программы
        }
    }

    if (vector_or_din_arr == true) // если пользователь выбрал динамический массив
    {
        size_t n = 0; // инициализация размера массива
        bool load_or_not; // вспомогательная переменная для выбора
        cout << "Загружаем массив из файла или нет: 0 - загружаем из файла, 1 - не загружаем из файла\n"; // вывод подсказки на экран, << - операция вставки
        cin >> load_or_not; // чтение переменной из консоли(функция чтения >> переменная), >> - операция извлечения
        if (load_or_not == false) // если пользователь выбрал загружаем из файла
        {
            char lfile[255]; // имя файла
            cout << "Введите имя файла для загрузки массива: "; // вывод подсказки на экран, << - операция вставки
            cin >> lfile; // чтение переменной из консоли(функция чтения >> переменная), >> - операция извлечения
            float* array_num = array_out_file(lfile, n); // вызов функции загрузки массива из файла
            print_array(array_num, n); // функция вывода массива на экран
            float rez = sum_array(array_num, n); // вызов функции вычисления результата
            cout << "Результат вычислений: " << rez; // вывод подсказки и результата на экран(функция вывода << "то, что выводим"), << - операция вставки
            delete[] array_num; // удаление памяти, выделенной под массив
            return 0; // завершение программы
        }
        if (load_or_not == true) // если пользователь выбрал загружаем не из файла
        {
            size_t n = 0; // инициализация n, n - кол-во элементов в массиве
            cout << "Введите размер массива: "; // вывод подсказки на экран(функция вывода << "то, что выводим"), << - операция вставки 
            cin >> n; // чтение переменной из консоли(функция чтения >> переменная), >> - операция извлечения
            float *array_num = new float[n]; // инициализация динамического массива, выделение памяти под массив
            bool rand_or_hand; // вспомогательная переменная для выбора
            cout << "Как ввести массив: 0 - вручную, 1 - рандомно\n"; // вывод подсказки на экран, << - операция вставки
            cin >> rand_or_hand; // чтение переменной из консоли(функция чтения >> переменная), >> - операция извлечения
            if (rand_or_hand == false) // если вводим массив вручную
            {
                input_hand_array(array_num, n); // функция заполнения массива вручную
            }
            if (rand_or_hand == true) // если вводим массив рандомно
            {
                srand(time(nullptr)); // функция srand выполняет инициализацию генератра случайных чисел rand(функция time использует текущее время в качестве начального значения, что позволяет каждый раз создавать различные наборы чисел)
                input_array(array_num, n); // функция заполнения массива рандомными числами
            }
            cout << "Массив: "; // вывод подсказки на экран, << - операция вставки
            print_array(array_num, n); // функция вывода массива на экран
            cout << "\n"; // перенос на следующую строку
            float rez = sum_array(array_num, n); // результат = функции вычислений по заданной формуле(массив, кол-во элементов в массиве)
            cout << "Результат вычислений: " << rez; // вывод подсказки и результата на экран(функция вывода << "то, что выводим"), << - операция вставки 
            delete [] array_num; // освобождение памяти, которую занимал массив
            return 0; // завершение работы программы
        }
    }
}